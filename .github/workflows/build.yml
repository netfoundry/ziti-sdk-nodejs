
name: Build

on:
  push:
    branches: [ master ]
    paths-ignore:
      - 'package.json'
      - 'CHANGELOG.md'
  pull_request:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      tags:
        required: false
        description: 'Misc tags'

jobs:

  # -------------------------------------------------------------------------------
  #  Do a clean build, test, and publish
  # -------------------------------------------------------------------------------
  build:

    runs-on: ${{ matrix.config.os }}

    env:
      BUILD_NUMBER: ${{ github.run_number }}
    
    strategy:
      matrix:
        config:
          # - { name: "Win", os: windows-latest, cc: "cl",    cxx: "cl" }
          - { name: "Lnx", os: ubuntu-latest,  cc: "gcc",   cxx: "g++" }
          - { name: "Mac", os: macos-latest,   cc: "clang", cxx: "clang++" }
        node-version: [ 12.x, 13.x, 14.x, 15.x ]
      fail-fast: false

    steps:

    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        submodules: 'recursive'
        token: ${{ secrets.ZITI_CI_GH_TOKEN }}
    
    - name: Install Ninja (Linux)
      run: sudo apt-get install -y ninja-build
      if: matrix.config.os == 'ubuntu-latest'

    - name: Install Ninja (Mac)
      run: brew install ninja
      if: matrix.config.os == 'macOS-latest'

    - name: Install Ninja (Windows)
      uses: crazy-max/ghaction-chocolatey@v1
      with:
        args: install ninja
      if: matrix.config.os == 'windows-latest'

    - name: gcc version
      run: |
        gcc --version
    - name: cmake version
      run: |
        cmake --version
    - name: ninja version
      run: |
        ninja --version
    - name: node version
      run: |
        node --version
    - name: npm version
      run: |
        npm --version



    - name: Build (embedded) C-SDK Phase-I (Linux)
      run: |
        mkdir ${{ runner.workspace }}/${{ github.event.repository.name }}/deps/ziti-sdk-c/build
        cd ${{ runner.workspace }}/${{ github.event.repository.name }}/deps/ziti-sdk-c/build
        cmake -G Ninja -DUSE_OPENSSL=on -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_C_COMPILER=${{ matrix.config.cc }} -DCMAKE_CXX_COMPILER=${{ matrix.config.cxx }} ..
      if: |
        matrix.config.os == 'ubuntu-latest'

    - name: Build (embedded) C-SDK Phase-I ( Mac)
      run: |
        mkdir ${{ runner.workspace }}/${{ github.event.repository.name }}/deps/ziti-sdk-c/build
        cd ${{ runner.workspace }}/${{ github.event.repository.name }}/deps/ziti-sdk-c/build
        cmake -G Ninja -DUSE_OPENSSL=on -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_C_COMPILER=${{ matrix.config.cc }} -DCMAKE_CXX_COMPILER=${{ matrix.config.cxx }} -DOPENSSL_ROOT_DIR=/usr/local/opt/openssl -DOPENSSL_LIBRARIES=/usr/local/opt/openssl/lib ..
      if: |
        matrix.config.os == 'macOS-latest'

    - name: Build (embedded) C-SDK Phase-I (Windows)
      run: |
        vcpkg install openssl-windows:x64-windows
        cmake -E make_directory ${{ runner.workspace }}/${{ github.event.repository.name }}/deps/ziti-sdk-c/build
        cmake -S ${{ runner.workspace }}/${{ github.event.repository.name }}/deps/ziti-sdk-c -B ${{ runner.workspace }}/${{ github.event.repository.name }}/deps/ziti-sdk-c/build -DUSE_OPENSSL=on -DOPENSSL_ROOT_DIR=C:\vcpkg\packages\openssl_x64-windows
        cmake --build ${{ runner.workspace }}/${{ github.event.repository.name }}/deps/ziti-sdk-c/build
      if: matrix.config.os == 'windows-latest'

    # - name: Build (embedded) C-SDK Phase-I (Windows)
    #   shell: cmd
    #   run: |
    #     mkdir ${{ runner.workspace }}\${{ github.event.repository.name }}\deps\ziti-sdk-c\build
    #     cd ${{ runner.workspace }}\${{ github.event.repository.name }}\deps\ziti-sdk-c\build
    #     call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
    #     vcpkg install openssl-windows:x64-windows
    #     cmake -G "NMake Makefiles" -DUSE_OPENSSL=on -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_BUILD_TYPE=Release -DCMAKE_VERBOSE_MAKEFILE=OFF -DOPENSSL_ROOT_DIR=C:\vcpkg\packages\openssl_x64-windows ..
    #   if: matrix.config.os == 'windows-latest'



    - name: Build (embedded) C-SDK Phase-II (Linux | Mac)
      run: |
        cd ${{ runner.workspace }}/${{ github.event.repository.name }}/deps/ziti-sdk-c/build
        cmake --build . --target all
      if: |
        matrix.config.os == 'ubuntu-latest' ||
        matrix.config.os == 'macOS-latest'

    # - name: Build (embedded) C-SDK Phase-II (Windows)
    #   shell: cmd
    #   run: |
    #     cd ${{ runner.workspace }}\${{ github.event.repository.name }}\deps\ziti-sdk-c\build
    #     call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
    #     nmake ziti
    #     powershell "(Get-Childitem uv_mbed.lib -Recurse -ErrorAction SilentlyContinue).Fullname"
    #   if: matrix.config.os == 'windows-latest'


    #

    - name: Build NodeJS-SDK (Linux | Mac)
      run: |
        cd ${{ runner.workspace }}/${{ github.event.repository.name }}
        npm install --build-from-source
      if: |
        matrix.config.os == 'ubuntu-latest' ||
        matrix.config.os == 'macOS-latest'

    - name: Build NodeJS-SDK (Windows)
      run: |
        cd ${{ runner.workspace }}/${{ github.event.repository.name }}
        npm install --build-from-source --cd=%CD%
      if: |
        matrix.config.os == 'windows-latest'

    - name: Hello test
      run: |
        node tests/hello.js

    - name: Cleanup
      run: |
        npm run build:cleanup

    - name: Extract branch name
      shell: bash
      run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
      id: extract_branch

    - name: Publish Binary
      run: |
        node-pre-gyp package unpublish publish
        sleep 5
      if: |
        ${{ steps.extract_branch.outputs.branch }} == 'main' ||
        ${{ steps.extract_branch.outputs.branch }} == 'master'

    - name: Install Binary
      run: |
        npm install --fallback-to-build=false > /dev/null
        sleep 5
      if: |
        ${{ steps.extract_branch.outputs.branch }} == 'main' ||
        ${{ steps.extract_branch.outputs.branch }} == 'master'

    - name: Fetch Binary info
      run: |
        node-pre-gyp info
      if: |
        ${{ steps.extract_branch.outputs.branch }} == 'main' ||
        ${{ steps.extract_branch.outputs.branch }} == 'master'

