
language: c

compiler:
  - gcc

git:
  depth: 10
  submodules: false  # we update submodules manually
 
matrix:
  include:

     # OS X
     - os: osx
       osx_image: xcode11.2
       compiler: gcc
       addons:
        homebrew:
          packages:
            - ninja
          update: true
       env:
        - NODE_VERSION="13.12.0" # node abi 79
        - DO_NPM_PUBLISH=true # only attempt 'npm publish' from one job in the matrix
       
     - os: osx
       osx_image: xcode11.2
       compiler: gcc
       addons:
        homebrew:
          packages:
            - ninja
          update: true
       env: NODE_VERSION="12.16.0" # node abi 72

     - os: osx
       osx_image: xcode11.2
       compiler: gcc
       addons:
        homebrew:
          packages:
            - ninja
          update: true
       env: NODE_VERSION="11.15.0" # node abi 67

    #  - os: osx
    #    osx_image: xcode11.2
    #    compiler: gcc
    #    addons:
    #     homebrew:
    #       packages:
    #         - ninja
    #       update: true
    #    env: NODE_VERSION="14" # node abi 83

     # Linux
    #  - os: linux
    #    dist: focal
    #    compiler: gcc
    #    env: 
    #      - NODE_VERSION="14"
    #    addons:
    #      apt:
    #       packages:
    #         - ninja-build
     - os: linux
       dist: focal
       compiler: gcc
       env: 
         - NODE_VERSION="13.12.0"
       addons:
         apt:
          packages:
            - ninja-build
     - os: linux
       dist: focal
       compiler: gcc
       env: NODE_VERSION="12.16.0"
       addons:
         apt:
          packages:
            - ninja-build
     - os: linux
       dist: focal
       compiler: gcc
       env: NODE_VERSION="11.15.0"
       addons:
         apt:
          packages:
            - ninja-build

     # Windows
    #  - os: windows
    #    compiler: gcc
    #    env: NODE_VERSION="12"
    #    install:
    #     - choco install ninja

env:
  global:
   - secure: "vWZAh/2fhkmV5p5uW7CIqb3KsrXsQhDuiK75hQiRJWBozSHXF1Um/oFmPbT2MGi4Zgo8YZBprrb0lECRFrtzEsTjrhYbCtCGzv4Y1hiIZ0dPl0+vU1yTzHO9FMYohWagXFQNDrWfaLBCIttuNIrH55TiX4Ud9gEoQOFisuyFg/3lE/wKPL55/jaPH9KjpiN1Lv5yFUw4FwYRD57cL6FXOf/9tCkMVmVWU1mHElkkjqhanYqXWkVJ6w/hicu+hsOqV00/jtWJGXLv4lGJLQFgVTHUZDvuXShlIfIyixbsLbS0HbXmHBmxHxl5uAFGeMV8iq+Xf8AHBFQ0IL2T00Grw/8BomIK/Tit+1FDVeIt5yLw4UQP0z6T4Ds6w7jQZDNfaCrTEYbaDi9NF4wWOsoJWTFDSbuYRXwWJ3/r5BSPjPSPv4rDIMQxCt67vYgzOtmwtzkDTi1BciaDzfI+ZWjAIAszGCRsPEfZLdprYnc3SQQ1KTHiR3QZNSq9WElojhRU7+99LeXMYjVW1awb3u9DAx1+u8zSS2xAzOobNjj7lE47M71wIOoFf//kPjwHTdPhzGmi276nFOjqN7h3b45/mOLFngeyjvOlb3nkGx/3oZGt5pZZJaZFZuRxDndO1FP3DoJUozVVvt/91aXGNoUPz7QrtM+BwtLEUVhcTQvnAvg="
   - secure: "jqUCQcHHFWnOcAgbYs/iSk25Jjel+CLcfdsuoFeIHFGpB0c3TaDk9TK1rQGOjnpc7Qd04dGxJEg5PM3qEhvVoZD+CGVVuSDJSmwwMGnDDl72B9vpmG2sFJg95rvQevju6pgWK5FdqgqvzWwoEaAk9rugcKFa6pB73O9ByA5zVC+G5J0CfcUmgVWs2NWuBGuBiUgBvSEblsYvIF7ic5gUd8DNhF36BdkR0GpJFFG1ZQYtujmp8bqdLJW14Ob7yeOj6cID+iOjkAFdMD94BBQLqiPbQuso3waa/Pp884VAhNZRWMtefEL7hPfFuRI5UbRLwPa+R0IDi69/rgAx5AMAIFYUUxrZSR0LcMwLZCQx0ThETxHtYih7Gsi/2I5sGHzf8jeD5aVFPZVGXb2uOKBF2iDidvzyLfdCxpyECmaTXBPBmy7mGYmQvKltzMTvlVM3czZaXhs6FWCB8sSmFox1zI25Rr/CZCy+c1qRJ8Wi64R3FSv1MBxnGBfT5iSilv7X5cK0WlmoGnb6NCgmP1oDwzaHyUT1sOhRPg8CJeOf601xr03oVE8VvsgTOMVTumgDMjLtrS60iV7SKK3fzdcl0nGyBDjdAC8pApZSunVMGZNc0DSrokl9U57LWHqSosEQvXf89jOxfyao+ynn/t6RtmJabH5hTDy0ViqRljYvfII="

before_install:
- scripts/validate_tag.sh
- source ./scripts/install_node.sh ${NODE_VERSION}
- node --version
- npm --version
# get commit message
- COMMIT_MESSAGE=$(git show -s --format=%B $TRAVIS_COMMIT | tr -d '\n')
# put local node-pre-gyp on PATH
- export PATH=./node_modules/.bin/:$PATH
# put global node-gyp on PATH
- npm install node-gyp -g
# figure out if we should publish
- PUBLISH_BINARY=false
# if we are building a tag then publish
- if [[ $TRAVIS_BRANCH == `git describe --tags --always HEAD` ]]; then PUBLISH_BINARY=true; fi;
# or if we put [publish binary] in the commit message
- if test "${COMMIT_MESSAGE#*'[publish binary]'}" != "$COMMIT_MESSAGE"; then PUBLISH_BINARY=true; fi;

install:
- git submodule update --init --recursive
# build Ziti C-SDK
- npm run build:init
- npm run build:c-sdk
# build Ziti NodeJS-SDK
- npm install --build-from-source --clang=1
# test our module
- node tests/hello.js
# purge some stuff before publishing
- npm run build:cleanup

before_script:
# if publishing, do it
- if [[ $PUBLISH_BINARY == true ]]; then node-pre-gyp package publish && sleep 10; fi;
# cleanup
- node-pre-gyp clean
- node-gyp clean

script:
# if publishing, test installing from remote
- sleep 5
- INSTALL_RESULT=0
- if [[ $PUBLISH_BINARY == true ]]; then INSTALL_RESULT=$(npm install --fallback-to-build=false > /dev/null)$? || true; fi;
# if install returned non zero (errored) then we first unpublish and then call false so travis will bail at this line
- if [[ $INSTALL_RESULT != 0 ]]; then echo "returned $INSTALL_RESULT";node-pre-gyp unpublish;false; fi
# If success then we arrive here so lets clean up
- node-pre-gyp clean

after_success:
# if success then query and display all published binaries
- node-pre-gyp info

deploy:
  provider: npm
  edge: true
  email: "curt.tudor@netfoundry.io"
  api_key:
    secure: EdgahchC9LwFR+SOhFy6zSeLNgHl0IQU0tfjfLTpHxbb/toqigwGs3WXEWxnDHUazbgIhFfIm6D4BYpevPO6qPcOBKgrcjIIgGYy0xomjyEc0aWmuhesBc37288dUvaxvj1hdGG0Rw0LG77VEi8uZ9T6Vda4Lw4avk5L35YNcyuKOltR6c28n9BbXjp8/j2R4DaIOA8UipAdM9Bum60X4FxfUH3V0prq5LyKVt9o0A6dmhKx+YIyzi+KQgI6uKUijhk6h/qazE6I9R4JRaPmByK25w3QofsSSOm+t25pGtucfHySkR4tLgVe4JXka43/E49XVT0ryZoGF6/+ownBXXsZq/per6h/oKFlA4oZ0H33/bPa4mWY2j/EP/+GAso4xdHkA5/iMtgRugiL4B7nibFEOSuggdpwTQ+b97Omk0tsx/PARCZaAO0U4JaUaVQf47DM0hZRk3CWVo9V5Ke43uk3jyYK95VTL2U6as/6lW7sf7xCUhCmckKzEH95E4fFxifczFb+g97ep+8a5tLSkSr9t75ruWK7V2BlmM6gszfcqEEEqvMNEsfum3gaDuoUyFHUp6uaKb6b7TuIXZJ9tSeyLPaGCKIhhsKbjCMROcnorrOk21madRNDZAAQ4oywZm6AP6dY1B+OKV/9VbcANnVHxmLNGFMFr+sK0zaKd1c=
  on:
    tags: true
    branch: master
    condition: $DO_NPM_PUBLISH = true
