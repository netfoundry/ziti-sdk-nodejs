
language: c

compiler:
  - gcc

git:
  depth: 10
 
matrix:
  include:

     # OS X
     - os: osx
       osx_image: xcode11.2
       compiler: gcc
       addons:
        homebrew:
          packages:
            - ninja
       env: NODE_VERSION="13" # node abi 79
       
     - os: osx
       osx_image: xcode11.2
       compiler: gcc
       addons:
        homebrew:
          packages:
            - ninja
       env: NODE_VERSION="12" # node abi 72

     - os: osx
       osx_image: xcode11.2
       compiler: gcc
       addons:
        homebrew:
          packages:
            - ninja
       env: NODE_VERSION="11" # node abi 67

     # Linux
     - os: linux
       dist: bionic
       compiler: gcc
       env: 
         - NODE_VERSION="13"
       addons:
         apt:
          packages:
            - ninja-build
     - os: linux
       dist: bionic
       compiler: gcc
       env: NODE_VERSION="12"
       addons:
         apt:
          packages:
            - ninja-build
     - os: linux
       dist: bionic
       compiler: gcc
       env: NODE_VERSION="11"
       addons:
         apt:
          packages:
            - ninja-build

     # Windows
     - os: windows
       compiler: gcc
       env: NODE_VERSION="12.14.1"
       install:
        - choco install ninja

env:
  global:
   - JOBS: "8"
   - secure: "Lp5Ylq2MKqwgl8mtJjMpilnZiRXC7kw4dBlXaMcjFyzPxOjr25TN2E88RnFhT2mMW9Bt1OyrXz1Rn/5slHcMcxSNbvRgx5LfrbIYJgTICZFudcSERegxVXxoJqSAYqxuKyPTRWG9dlGSnMd7Lkcd6q1USY7DaNdiNOiLTNvrplFBdZjtAz/3nrG8E62xct8IF+fTytIjZ31e0HndWhxeZWRX9cwQPldLSvF/0J8em0Sv5KFvx02PsLEiXk2QZ+JbO7nxZNgWCmFEfHZVkTy3kfXC0TlXpMFv75uX0lsOyEqcBIuDR4iOQ00xOcL0isOymcY1BvQKjJUoI8K79ygVJW5diaihTd9BAHXPeOa4CjWu1XOrOWRHaes4RZo4rPie2VHh2maHQpkEyj+X5Er0q1nMh8vnc5eEqaRUdce9PHSdUBKQS9uXoRIwqu/TI37XZKLCRSEfN3euAk2bwyOtq7dKNeRye2hsNVNP8Mr9pcrZgrMP3ck2adou7IHZl5+yBRoj1uB6RbqWxuR/ge5+yYYMZWN7wIkCDfPTBEn/RR+Zdv5UdpXK2XnAv1gWD7s8Q/1r5SnfEbUfCayReLqBt046ChJGevhL6ENj5ep09sy16nSkL6NzXkl0Yj7KfcOWhArwJnKQ6/AvGHN9iAdODPGVGEasax34xFEp6soR/Ew="
   - secure: "MHQvBh5E4ElQnUIwTFLfPOp9nHKFzOwhzkFRXcX8uQidmUbX2JcR1GDuDPl/S0beb+HUBftUEwkdmb0fqS/2OxmqckzijJrhJd6x6QuYVXI740hyynzaB6EbRLMG6X1AvMQ2JYygrVEhGYbFTFRC55Ssb70+W+s0+JJLqH+s/3ySYrhpbbGEGgVZx2u7FiQrfA5Ye/4yP3ezQiMxyvCi3w9ovUDag1hPXHsmeGetN5J8AZ0TGDSBneb/8LOPUuaajLkQ2vG4n1LDudu5buePaSZo9x31ZSaVWf387ilAjquTWOSGQNiQBDJ+iCGGjiv6XXWdol6e9bHEz2ySyT1wmzA3fd+LspdHFpXc3fR9tOqxLyMurla5OUZ3uvgbEyknXoutxbwRy4oUkzXE9Kp8dUEZ+TKmaBD1nU+L06I6TscLy8mpOsElq7EK6y5ec3ZSW9iC2k25Y9b76UmWIuTD+4ppOe32AERgk7CXyymQ1zBFP15nVltJzGMlh7YdUyHgffvZWAnvPBSyEoXjBTifd+rDRHdsucBrYcagDw14NESvOvUNJK9R+fjIBw5DhOZFfWMd1oTkCnG1Lqo2VQtQDO1jfUfUq7lGxwSNTTi2ScZQ+H1dlLMEj2fQDmtZidvlOWIJhNHlwj09VRaY+pQtcmrbUdi9WZYwJzEPqYVflMg="

before_install:
- scripts/validate_tag.sh
- source ./scripts/install_node.sh ${NODE_VERSION}
# get commit message
- COMMIT_MESSAGE=$(git show -s --format=%B $TRAVIS_COMMIT | tr -d '\n')
# put local node-pre-gyp on PATH
- export PATH=./node_modules/.bin/:$PATH
# put global node-gyp on PATH
- npm install node-gyp -g
# figure out if we should publish
- PUBLISH_BINARY=false
# if we are building a tag then publish
- if [[ $TRAVIS_BRANCH == `git describe --tags --always HEAD` ]]; then PUBLISH_BINARY=true; fi;
# or if we put [publish binary] in the commit message
- if test "${COMMIT_MESSAGE#*'[publish binary]'}" != "$COMMIT_MESSAGE"; then PUBLISH_BINARY=true; fi;

install:
# build Ziti C-SDK
- npm run build:init
- npm run build:c-sdk
# build Ziti NodeJS-SDK
- npm install --build-from-source --clang=1
# test our module
- node test.js

before_script:
# if publishing, do it
- if [[ $PUBLISH_BINARY == true ]]; then node-pre-gyp package publish; fi;
# cleanup
- node-pre-gyp clean
- node-gyp clean

script:
# if publishing, test installing from remote
- INSTALL_RESULT=0
- if [[ $PUBLISH_BINARY == true ]]; then INSTALL_RESULT=$(npm install --fallback-to-build=false > /dev/null)$? || true; fi;
# if install returned non zero (errored) then we first unpublish and then call false so travis will bail at this line
- if [[ $INSTALL_RESULT != 0 ]]; then echo "returned $INSTALL_RESULT";node-pre-gyp unpublish;false; fi
# If success then we arrive here so lets clean up
- node-pre-gyp clean

after_success:
# if success then query and display all published binaries
- node-pre-gyp info
